======================
Тестовое задание Skein
======================

На входе мы получаем некие файлы в xml/csv формате. В этих файлах может содержаться от 1 до миллиона записей и более с
информацией о товарах. Структура файлов (название/кол-во столбцов csv и т.п.) может отличатся.
В каждом файле могут быть дубликаты/варианты товаров (товары с одинаковыми product_id/image) но отличается
цвет/размер/материал и т.д. Полное описание задания находится в файле task_info.txt

Описание
--------

Задача реализована через написание абстрактного класса FileParser, в котором реализуется вся логика.
Чтобы можно было парсить файл любого размера, необходимо у наследника создать метод iterate который итерирует файл по
необходимым нам частям. А так же необходимо реализовать метод converter, в котором преобразуется полученная в
генераторе iterate часть файла в тип dict.
Внутри класса FileParser реализована дополнительная валидация данных, через библиотеку trafaret таким образом можно
валидировать товары перед сохранением в базу данных, например, пропускать только товары с фото и ценой и
избежать возможных ошибок.
Сохранение в базу реализовано многопоточно. Товары спаршенные из файла добавляются в очередь на сохранение или апдейт,
и так же поднимается 10 обработчиков этой очереди каждый в своем потоке.
Перед обработкой файла, мы загружаем в оперативную память хэш функции всех названий товаров, и когда нужно проверить
есть такой товар уже в базе или нет, мы делаем это очень быстро за счет проверки хэшей.

Инструкция
----------

Клонируем проект себе и переходим в папку проекта
``git clone https://github.com/sergei4e/Skein-Test``

Установливаем необходимые библиотеки
``pip install -R requirements.txt``

Создаем таблицу в базе данных
``python db.py create``

Запускаем парсинг файлов с товарами
``python main.py``

Если нужно перезапустить все заново, можно удалить все данные из базы
``python db.py drop``

Парсер по умолчанию настроен на работу с базой sqlite.
Чтобы настроить на работу с базой PostgreSQL необходимо в файле db.py закомментировать
строку с dsn sqlite и раскомментировать 2 строчки выше.

При этом необходимо прописать вместо этой строчки актуальные данные для коннекта с базой
``{'user': 'user', 'database': 'db', 'host': 'host', 'password': 'pass'}``

Запуск тестов
``python -m unittest discover``

Не реализовано
--------------

Не весь код покрыт тестами.

Не реализован поиск неточных дублей товаров по базе, например если 2 одинаковых товара отличаются только по цвету.
Реализовать это можно многими путями, от простейшего определение расстояния Левинштейна в названиях товаров.
https://ru.wikipedia.org/wiki/Расстояние_Левенштейна

Например, есть 2 похожих товара с такими названиями:

Advanced Night Micro Cleansing Balm/2.2 oz.
Advanced Night Micro Cleansing Foam/3.4 oz.

Расстояние Левинштейна у них будет маленькое, равное 5.

До сложных алгоритмов с применением нейросетей и распознавания изображений.
